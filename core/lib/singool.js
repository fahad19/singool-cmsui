// Generated by CoffeeScript 1.6.1
(function() {
  var Singool, express, findit, fs, _;

  _ = require('underscore');

  fs = require('fs');

  express = require('express');

  findit = require('findit');

  Singool = (function() {

    Singool.prototype.config = {};

    Singool.prototype.jsPackage = null;

    Singool.prototype.cssPackage = null;

    Singool.prototype._compilers = {};

    Singool.prototype.defaults = {
      theme: null,
      publicPath: null,
      cssPath: null,
      jsPath: null,
      themesPath: null,
      pluginsPath: null,
      paths: [],
      compress: false,
      plugins: [],
      vendors: [],
      ignore: [],
      compilers: {},
      test: false,
      init: true,
      cssFile: 'app.css',
      jsFile: 'app.js'
    };

    function Singool(config) {
      this.config = _.defaults(config, this.defaults);
      this.compilers();
      this.generators();
    }

    Singool.prototype.generators = function() {
      var Css, Js, Layout;
      Css = require('./generators/css');
      this.css = new Css(this);
      Js = require('./generators/js');
      this.js = new Js(this);
      Layout = require('./generators/layout');
      return this.layout = new Layout(this);
    };

    Singool.prototype.testCases = function() {
      var cases, extension, file, filename, files, i, j, path, testCase, _ref;
      cases = [];
      _ref = this.config.paths;
      for (i in _ref) {
        path = _ref[i];
        files = findit.sync(path);
        for (j in files) {
          file = files[j];
          if (/\/tests\/cases\//.test(file)) {
            testCase = file.replace(path + '/', '');
            filename = _.last(testCase.split('/'));
            if (filename.indexOf('.') !== -1 || filename.indexOf('.') > 0) {
              extension = filename.substr(filename.lastIndexOf('.') + 1);
              cases.push(testCase.replace('.' + extension, ''));
            }
          }
        }
      }
      return cases;
    };

    Singool.prototype.compilers = function() {
      var Compiler, compilerFiles, compilerName, compilers, k, v;
      compilers = {};
      compilerFiles = fs.readdirSync(module.id.replace(_.last(module.id.split('/')), 'compilers/'));
      for (k in compilerFiles) {
        v = compilerFiles[k];
        compilerName = v.replace('.js', '');
        if (!compilerName) {
          continue;
        }
        Compiler = require('./compilers/' + compilerName);
        this._compilers[compilerName] = new Compiler(this);
        compilers[compilerName] = this._compilers[compilerName].run;
      }
      return this.config.compilers = compilers;
    };

    Singool.prototype.build = function(callback) {
      if (callback == null) {
        callback = false;
      }
      this.css.write();
      this.js.write();
      this.layout.write();
      if (typeof callback === 'function') {
        return callback();
      }
    };

    Singool.prototype.createServer = function(serveStatic) {
      var app,
        _this = this;
      if (serveStatic == null) {
        serveStatic = false;
      }
      app = express.createServer();
      app.configure(function() {
        return app.use(express["static"](_this.config.publicPath));
      });
      app.get('/', function(req, res) {
        return res.send(_this.layout.generate());
      });
      if (!serveStatic) {
        app.get('/css/app.css', function(req, res) {
          return _this.css.generate(function(source) {
            res.header('Content-Type', 'text/css');
            return res.send(source);
          });
        });
        app.get('/js/app.js', function(req, res) {
          return _this.js.generate(function(source) {
            res.header('Content-Type', 'application/x-javascript');
            return res.send(source);
          });
        });
      }
      return app;
    };

    Singool.prototype.clear = function() {
      this.layout.clear();
      this.js.clear();
      return this.css.clear();
    };

    Singool.prototype.rootPath = function() {
      var currentPath, rootPath;
      currentPath = module.id.split('/');
      rootPath = (_.first(currentPath, currentPath.length - 3)).join('/');
      return rootPath;
    };

    Singool.prototype.registerTasks = function() {
      var T, k, t, taskFile, taskName, tasks, _results;
      tasks = fs.readdirSync(module.id.replace(_.last(module.id.split('/')), 'tasks/'));
      _results = [];
      for (k in tasks) {
        taskFile = tasks[k];
        taskName = taskFile.replace('.js', '');
        T = require('./tasks/' + taskName);
        t = new T(this);
        _results.push(task(taskName, t.description, t.run));
      }
      return _results;
    };

    return Singool;

  })();

  module.exports = Singool;

}).call(this);
