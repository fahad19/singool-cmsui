// Generated by CoffeeScript 1.6.1
(function() {
  var Css, fs, less;

  less = require('less');

  fs = require('fs');

  Css = (function() {

    Css.prototype.config = null;

    function Css(singool) {
      this.singool = singool;
      this.config = this.singool.config;
    }

    Css.prototype.generate = function(callback) {
      var k, lessParser, pkg, pluginLessPath, pluginsLess, themeLess, themeLessPath, v, _ref,
        _this = this;
      if (callback == null) {
        callback = false;
      }
      lessParser = less.Parser;
      pkg = new lessParser({
        paths: [this.config.themesPath, this.config.cssPath]
      });
      pluginsLess = '';
      _ref = this.config.plugins;
      for (k in _ref) {
        v = _ref[k];
        pluginLessPath = this.config.pluginsPath + '/' + v + '/vendors/plugin.less';
        if (fs.existsSync(pluginLessPath)) {
          pluginsLess += fs.readFileSync(pluginLessPath, 'utf8');
        }
      }
      themeLessPath = this.config.themesPath + '/' + this.config.theme + '/css/theme.less';
      themeLess = fs.readFileSync(themeLessPath, 'utf8');
      return pkg.parse(themeLess + pluginsLess, function(e, tree) {
        var source;
        source = tree.toCSS({
          compress: _this.config.compress
        });
        if (callback) {
          return callback(source);
        }
      });
    };

    Css.prototype.write = function(path) {
      var _this = this;
      if (path == null) {
        path = null;
      }
      if (!path) {
        path = this.config.cssPath + '/' + this.config.cssFile;
      }
      return this.generate(function(source) {
        fs.writeFileSync(path, source);
        return console.log('CSS file written at: ' + path);
      });
    };

    Css.prototype.clear = function() {
      var file;
      file = this.config.cssPath + '/' + this.config.cssFile;
      if (fs.existsSync(file)) {
        fs.unlinkSync(file);
        return console.log(this.config.cssFile + ' deleted');
      }
    };

    return Css;

  })();

  module.exports = Css;

}).call(this);
